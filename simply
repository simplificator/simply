#!/usr/bin/env ruby

#
# Simply lets you perform all common tasks for this project from one convenient place
#
# To add a new Command do the following:
# 1. Define a new class that inherits from Command
# 2. Override the methods `.command_string`, `#usage`, `#perform`
# 3. Add new class to the Simply::COMMAND_CLASSES array
#

require 'fileutils'

class Command
  def initialize(arguments)
    @arguments = arguments
  end

  def self.command_string
    raise 'Implement this in subclass'
  end

  def usage
    raise 'Implement this in subclass'
  end

  def perform
    if Simply.did_init_run?
      system(executable_path + " #{arguments.join(' ')}")
    else
      STDERR.puts 'Error: `simply init` has not been run!'
    end
  end

  def executable_path
    "#{Simply::COMMAND_EXECUTABLE_DIRECTORY}#{self.class.command_string}"
  end

  protected

  attr_reader :arguments
end

class HelpCommand < Command
  def self.command_string
    'help'
  end

  def usage
    "help\t\t\tDisplays this message"
  end

  def perform
    puts 'Simply lets you perform all common tasks for this project from one convenient place:'
    puts
    puts 'Usage: ./simply <command>'
    puts
    puts 'Available commands:'

    Simply::COMMAND_CLASSES.each do |command_class|
      puts command_class.new(arguments).usage
    end
  end

  def executable_path
    nil # this command has no corresponding executable file
  end
end

class VersionCommand < Command
  def self.command_string
    'version'
  end

  def usage
    "version\t\t\tDisplays the version of the simply script"
  end

  def perform
    puts "Simply version #{Simply::VERSION}"
  end

  def executable_path
    nil # this command has no corresponding executable file
  end
end

class InitCommand < Command
  def self.command_string
    'init'
  end

  def usage
    "init\t\t\tInitializes this project for use with the simply script"
  end

  def perform
    system("mkdir -p #{Simply::COMMAND_EXECUTABLE_DIRECTORY}")

    Simply::COMMAND_CLASSES.each do |command|
      executable_path = command.new([]).executable_path
      next if executable_path.nil?

      if File.exists? executable_path
        puts "Warning: #{executable_path} exists, skipping."
      else
        system("echo \"#{file_content_for_command(command)}\" > #{executable_path}")
        system("chmod +x #{executable_path}")
      end
    end

    puts "Executable files have been created for you. Please edit them for your project's needs in #{Simply::COMMAND_EXECUTABLE_DIRECTORY}"
  end

  def executable_path
    nil # this command has no corresponding executable file
  end

  private

  def file_content_for_command(command)
    command_string = command.command_string
"#!/bin/bash

#
# Performs the #{command_string} step for the 'simply' executable.
# Run from the project root with ./simply #{command_string}
#

# Replace the following line with the steps to perform #{command_string} for this project
echo 'This project has no #{command_string} step.'
"
  end
end

class SetupCommand < Command
  def self.command_string
    'setup'
  end

  def usage
    "setup\t\t\tSets up all the project's dependencies. Assumed: Running on OS X, postgres, rbenv installed."
  end
end

class BuildCommand < Command
  def self.command_string
    'build'
  end

  def usage
    "build\t\t\tBuilds the project (compiling and all other necessary steps before running)"
  end
end

class TestCommand < Command
  def self.command_string
    'test'
  end

  def usage
    "test\t\t\tRuns the tests for this project"
  end
end

class RunCommand < Command
  def self.command_string
    'run'
  end

  def usage
    "run\t\t\tRuns the project"
  end
end

class DeployCommand < Command
  def self.command_string
    'deploy'
  end

  def usage
    "deploy <environment>\tDeploys the project on a specific environment"
  end
end

class Simply
  VERSION = '0.9.4'

  COMMAND_CLASSES = [
    HelpCommand,
    VersionCommand,
    InitCommand,
    SetupCommand,
    BuildCommand,
    TestCommand,
    RunCommand,
    DeployCommand
  ]

  COMMAND_EXECUTABLE_DIRECTORY = './bin/simply/'

  def initialize(arguments)
    @arguments = arguments
  end

  def self.did_init_run?
    File.exists? COMMAND_EXECUTABLE_DIRECTORY
  end

  def perform
    command_string = arguments.shift

    command = COMMAND_CLASSES.find do |command_class|
      command_class.command_string == command_string
    end || HelpCommand

    command.new(arguments).perform
  end

  private

  attr_reader :arguments
end

Simply.new(ARGV).perform
